// ---------------------------------------------------------------------------------------------------------------------
// Imports
// ---------------------------------------------------------------------------------------------------------------------
using AterraEngine.DependencyInjection;
using Tests.AterraEngine.DependencyInjection.Helpers;
using Tests.AterraEngine.DependencyInjection.Services;

namespace Tests.AterraEngine.DependencyInjection;
// ---------------------------------------------------------------------------------------------------------------------
// Code
// ---------------------------------------------------------------------------------------------------------------------
public class ScopedProviderTests {
    [Test]
    public async Task ScopedProvider_Should_Return_Service_Provider_Empty() {
        // Arrange
        var collection = new ServiceCollection();

        // Act
        IScopedProvider provider = collection.Build();

        // Assert
        await Assert.That(provider)
            .IsNotNull()
            .And.HasCount().EqualTo(0);
    }

    [Test]
    [Arguments(0b1)]
    [Arguments(0b10)]
    [Arguments(0b100)]
    [Arguments(0b1000)]
    [Arguments(0b1000_0)]
    [Arguments(0b1000_00)]
    [Arguments(0b1000_000)]
    [Arguments(0b1000_0000)]
    [Arguments(0b1000_0000_0)]
    [Arguments(0b1000_0000_00)]
    [Arguments(0b1000_0000_000)]
    [Arguments(0b1000_0000_0000)]
    // [Arguments(0b1000_0000_0000_0)] // Takes a bit too long to auto generate these services. Maybe look into a small library that can 
    // [Arguments(0b1000_0000_0000_00)]
    // [Arguments(0b1000_0000_0000_000)]
    // [Arguments(0b1000_00000_000_0000)]
    public async Task ScopedProvider_Should_Return_Service_Provider_Count(int count) {
        // Arrange
        var collection = new ServiceCollection();
        ServiceHelper.AddAutoGeneratedServicesServices(collection, count);

        // Act
        IScopedProvider provider = collection.Build();

        // Assert
        await Assert.That(provider)
            .IsNotNull()
            .And.HasCount().EqualTo(count);
    }

    [Test]
    [Arguments(typeof(IdService))]
    [Arguments(typeof(IIdService))]
    public async Task ScopedProvider_GetService_ReturnsNullOnInvalid(Type serviceType) {
        // Arrange
        var collection = new ServiceCollection();
        ServiceHelper.AddAutoGeneratedServicesServices(collection, 10);// THe actual count here doesn't really matter except for performance reasons.
        IScopedProvider provider = collection.Build();

        // Act
        object? service = provider.GetService(serviceType);

        // Assert
        await Assert.That(service)
            .IsNull();
    }

    [Test]
    [Arguments(typeof(IIdService), typeof(IdService))]
    [Arguments(typeof(IEmptyService), typeof(EmptyService))]
    [Arguments(typeof(IScopedProviderRequiredService), typeof(ScopedProviderRequiredService))]
    // [Arguments(typeof(IServiceWithGenerics<,>), typeof(ServiceWithGenerics))] // TODO can only be tested when these types of generics are implemented
    public async Task ScopedProvider_GetService_ReturnsValidImplementation(Type serviceType, Type implementationType) {
        // Arrange
        var collection = new ServiceCollection();
        ServiceHelper.AddAutoGeneratedServicesServices(collection, 10);// THe actual count here doesn't really matter except for performance reasons.
        collection.AddSingleton(serviceType, implementationType);
        IScopedProvider provider = collection.Build();

        // Act
        object? service = provider.GetService(serviceType);

        // Assert
        await Assert.That(service)
            .IsNotNull()
            .And.IsAssignableTo(serviceType)
            .And.IsTypeOf(implementationType);
    }

    [Test]
    [Arguments(typeof(IdService))]
    [Arguments(typeof(IIdService))]
    public async Task ScopedProvider_GetRequiredService_ThrowsOnNotRegisteredService(Type serviceType) {
        // Arrange
        var collection = new ServiceCollection();
        ServiceHelper.AddAutoGeneratedServicesServices(collection, 10);// THe actual count here doesn't really matter except for performance reasons.
        IScopedProvider provider = collection.Build();

        // Act && Assert
        await Assert.ThrowsAsync<CouldNotBeResolvedException>(() => Task.FromResult(provider.GetRequiredService(serviceType)));
    }

    [Test]
    [Arguments(typeof(IIdService), typeof(IdService))]
    [Arguments(typeof(IEmptyService), typeof(EmptyService))]
    [Arguments(typeof(IScopedProviderRequiredService), typeof(ScopedProviderRequiredService))]
    // [Arguments(typeof(IServiceWithGenerics<,>), typeof(ServiceWithGenerics))] // TODO can only be tested when these types of generics are implemented
    public async Task ScopedProvider_GetRequiredService_ReturnsValidImplementation(Type serviceType, Type implementationType) {
        // Arrange
        var collection = new ServiceCollection();
        ServiceHelper.AddAutoGeneratedServicesServices(collection, 10);// THe actual count here doesn't really matter except for performance reasons.
        collection.AddSingleton(serviceType, implementationType);
        IScopedProvider provider = collection.Build();

        // Act
        object service = provider.GetRequiredService(serviceType);

        // Assert
        await Assert.That(service)
            .IsNotNull()
            .And.IsAssignableTo(serviceType)
            .And.IsTypeOf(implementationType);
    }

    [Test]
    // ReSharper disable MethodHasAsyncOverload
    public async Task ScopedProvider_UsingScope_ManualDispose() {
        // Arrange
        IServiceCollection collection = CollectionHelper.CreateCollectionWithServices(256);
        collection.AddScoped<IDisposableService, DisposableService>();
        IScopedProvider originalProvider = collection.Build();
        
        var scopeProviderLevel0 = (ScopedProvider)originalProvider.CreateNewScope(); // Cast to original type because of internal implementation.
        var scopeProviderLevel1A = (ScopedProvider)scopeProviderLevel0.CreateNewScope();
        var scopeProviderLevel1B = (ScopedProvider)scopeProviderLevel0.CreateNewScope();
        
        var disposableServiceLevel0 = scopeProviderLevel0.GetRequiredService<IDisposableService>();
        var disposableServiceLevel1A = scopeProviderLevel1A.GetRequiredService<IDisposableService>();
        var disposableServiceLevel1B = scopeProviderLevel1B.GetRequiredService<IDisposableService>();
        
        // Act
        int originalScopeCount = scopeProviderLevel0.ChildScopes.Count;
        scopeProviderLevel1A.Dispose();
        IScopedProvider remainingScope = scopeProviderLevel0.ChildScopes.First();

        // Assert
        await Assert.That(originalScopeCount).IsEqualTo(2);
        await Assert.That(scopeProviderLevel0).IsNotNull();
        await Assert.That(scopeProviderLevel0.ChildScopes).HasCount().EqualTo(1);
        await Assert.That(remainingScope).IsEqualTo(scopeProviderLevel1B);
        
        await Assert.That(scopeProviderLevel1A.ParentScope).IsNull();
        await Assert.That(scopeProviderLevel1A.Instances).IsEmpty();
        await Assert.That(scopeProviderLevel1A.DisposableInstances).IsEmpty();
        await Assert.That(scopeProviderLevel1A.AsyncDisposableInstances).IsEmpty();
        await Assert.That(scopeProviderLevel1A.ChildScopes).IsEmpty();

        await Assert.That(disposableServiceLevel0.ConnectionString).IsNotNull();
        await Assert.That(disposableServiceLevel1A.ConnectionString).IsNull().Because("Should have been disposed");
        await Assert.That(disposableServiceLevel1B.ConnectionString).IsNotNull();
    }
    
    [Test]
    public async Task ScopedProvider_UsingScope_ManualDisposeAsync() {
        // Arrange
        IServiceCollection collection = CollectionHelper.CreateCollectionWithServices(256);
        collection.AddScoped<IDisposableService, DisposableService>();
        IScopedProvider originalProvider = collection.Build();
        var scopeProviderLevel0 = (ScopedProvider)originalProvider.CreateNewScope(); // Cast to original type because of internal implementation.
        var scopeProviderLevel1A = (ScopedProvider)scopeProviderLevel0.CreateNewScope();
        var scopeProviderLevel1B = (ScopedProvider)scopeProviderLevel0.CreateNewScope();
        
        var disposableServiceLevel0 = scopeProviderLevel0.GetRequiredService<IDisposableService>();
        var disposableServiceLevel1A = scopeProviderLevel1A.GetRequiredService<IDisposableService>();
        var disposableServiceLevel1B = scopeProviderLevel1B.GetRequiredService<IDisposableService>();
        
        // Act
        int originalScopeCount = scopeProviderLevel0.ChildScopes.Count;
        await scopeProviderLevel1A.DisposeAsync();
        IScopedProvider remainingScope = scopeProviderLevel0.ChildScopes.First();

        // Assert
        await Assert.That(originalScopeCount).IsEqualTo(2);
        await Assert.That(scopeProviderLevel0).IsNotNull();
        await Assert.That(scopeProviderLevel0.ChildScopes).HasCount().EqualTo(1);
        await Assert.That(remainingScope).IsEqualTo(scopeProviderLevel1B);
        
        await Assert.That(scopeProviderLevel1A.ParentScope).IsNull();
        await Assert.That(scopeProviderLevel1A.Instances).IsEmpty();
        await Assert.That(scopeProviderLevel1A.DisposableInstances).IsEmpty();
        await Assert.That(scopeProviderLevel1A.AsyncDisposableInstances).IsEmpty();
        await Assert.That(scopeProviderLevel1A.ChildScopes).IsEmpty();

        await Assert.That(disposableServiceLevel0.ConnectionString).IsNotNull();
        await Assert.That(disposableServiceLevel1A.ConnectionString).IsNull().Because("Should have been disposed");
        await Assert.That(disposableServiceLevel1B.ConnectionString).IsNotNull();
    }
}
