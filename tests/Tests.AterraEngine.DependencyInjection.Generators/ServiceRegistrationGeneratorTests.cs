// ---------------------------------------------------------------------------------------------------------------------
// Imports
// ---------------------------------------------------------------------------------------------------------------------
using AterraEngine.DependencyInjection;
using AterraEngine.DependencyInjection.Generators;
using JetBrains.Annotations;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.ObjectPool;
using System;
using System.Reflection;
using System.Threading.Tasks;
using Xunit;

namespace Tests.AterraEngine.DependencyInjection.Generators;
// ---------------------------------------------------------------------------------------------------------------------
// Code
// ---------------------------------------------------------------------------------------------------------------------
public class ServiceRegistrationGeneratorTests : IncrementalGeneratorTest<ServiceRegistrationGenerator> {
    protected override Assembly[] ReferenceAssemblies { get; } = [
        typeof(object).Assembly,
        typeof(FactoryCreatedServiceAttribute<,>).Assembly,
        typeof(IFactoryService<>).Assembly,
        typeof(InjectableServiceAttribute<>).Assembly,
        typeof(ValueTuple).Assembly,// For tuples
        typeof(Attribute).Assembly,
        typeof(Console).Assembly,
        typeof(ServiceLifetime).Assembly,
        typeof(PooledObjectPolicy<>).Assembly,
        typeof(DefaultObjectPoolProvider).Assembly,
        Assembly.Load("System.Runtime")
    ];

    [Theory]
    [InlineData(FactoryCreatedServiceInput, FactoryCreatedServiceOutput)]
    [InlineData(InjectableServiceInput, InjectableServiceOutput)]
    // TODO make tests for the pooledInjectable generator option
    public async Task TestText(string inputText, string expectedOutput) {
        await TestGeneratorAsync(inputText, expectedOutput, predicate: result => result.HintName.EndsWith("ServiceRegistration.g.cs"));
    }

    #region FactoryCreatedService Test
    [LanguageInjection("csharp")] private const string FactoryCreatedServiceInput = """
        using Microsoft.Extensions.DependencyInjection;
        namespace TestNamespace {
            [AterraEngine.DependencyInjection.FactoryCreatedService<IExampleFactory, ICreatedService>(ServiceLifetime.Transient)]
            public class CreatedService : ICreatedService;
            public interface ICreatedService;
            
            [AterraEngine.DependencyInjection.InjectableService<IExampleFactory>(ServiceLifetime.Singleton)]
            public class ExampleFactory :IExampleFactory {
                public ICreatedService Create() => new CreatedService();
            }
            
            public interface IExampleFactory : AterraEngine.DependencyInjection.IFactoryService<ICreatedService>;
        }
        """;

    [LanguageInjection("csharp")] private const string FactoryCreatedServiceOutput = """
        // <auto-generated />
        using Microsoft.Extensions.DependencyInjection;
        namespace TestProject;

        public static class ServiceRegistration {
            public static IServiceCollection RegisterServicesFromTestProject(this IServiceCollection services) {
                services.AddSingleton<TestNamespace.IExampleFactory, TestNamespace.ExampleFactory>();
                services.AddTransient<TestNamespace.ICreatedService>((provider) => provider.GetRequiredService<TestNamespace.IExampleFactory>().Create());
                return services;
            }
        }
        """;
    #endregion

    #region InjectableService Test
    [LanguageInjection("csharp")] private const string InjectableServiceInput = """
        using Microsoft.Extensions.DependencyInjection;
        namespace TestNamespace {
            [AterraEngine.DependencyInjection.InjectableService<IExampleService>(ServiceLifetime.Singleton)]
            public class ExampleService : IExampleService;
            
            
            public interface IExampleService;
        }
        """;

    [LanguageInjection("csharp")] private const string InjectableServiceOutput = """
        // <auto-generated />
        using Microsoft.Extensions.DependencyInjection;
        namespace TestProject;

        public static class ServiceRegistration {
            public static IServiceCollection RegisterServicesFromTestProject(this IServiceCollection services) {
                services.AddSingleton<TestNamespace.IExampleService, TestNamespace.ExampleService>();
                return services;
            }
        }

        """;
    #endregion
}
