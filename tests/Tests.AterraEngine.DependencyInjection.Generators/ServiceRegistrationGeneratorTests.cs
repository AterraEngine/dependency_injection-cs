// ---------------------------------------------------------------------------------------------------------------------
// Imports
// ---------------------------------------------------------------------------------------------------------------------
using AterraEngine.DependencyInjection;
using AterraEngine.DependencyInjection.Generators;
using JetBrains.Annotations;
using Microsoft.CodeAnalysis;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.ObjectPool;
using System;
using System.Linq;
using System.Threading.Tasks;

namespace Tests.AterraEngine.DependencyInjection.Generators;
// ---------------------------------------------------------------------------------------------------------------------
// Code
// ---------------------------------------------------------------------------------------------------------------------
public class ServiceRegistrationGeneratorTests : IncrementalGeneratorTest<ServiceRegistrationGenerator> {
    protected override System.Reflection.Assembly[] ReferenceAssemblies { get; } = [
        typeof(object).Assembly,
        typeof(FactoryCreatedServiceAttribute<,>).Assembly,
        typeof(IFactoryService<>).Assembly,
        typeof(InjectableServiceAttribute<>).Assembly,
        typeof(ValueTuple).Assembly, // For tuples
        typeof(Attribute).Assembly,
        typeof(Console).Assembly,
        typeof(ServiceLifetime).Assembly,
        typeof(PooledObjectPolicy<>).Assembly,
        typeof(DefaultObjectPoolProvider).Assembly,
        System.Reflection.Assembly.Load("System.Runtime")
    ];

    [Test]
    [Arguments(FactoryCreatedServiceInput, FactoryCreatedServiceOutput)]
    [Arguments(InjectableServiceInput, InjectableServiceOutput)]
    public async Task TestText(string inputText, string expectedOutput) {
        // Arrange
        GeneratorDriverRunResult runResult = await RunGeneratorAsync(inputText);
        
        // Act
        GeneratedSourceResult? generatedSource = runResult.Results
            .SelectMany(result => result.GeneratedSources)
            .SingleOrDefault(result => result.HintName.EndsWith("ServiceRegistration.g.cs"));

        // Assert
        await Assert.That(generatedSource?.SourceText).IsNotNull();
        await Assert
            .That(generatedSource?.SourceText.ToString())
            .IsEqualTo(expectedOutput).IgnoringWhitespace().WithTrimming();
        
    }
    
    [Test]
    [Arguments(PooledInjectableServiceInput, PooledInjectableServiceOutput, PooledInjectableServiceOutputPooledServices)]
    public async Task TestPooledInjectableServiceOutput(string inputText, string expectedOutput, string expectedOutputPooledServices) {
        // Arrange
        GeneratorDriverRunResult runResult = await RunGeneratorAsync(inputText);
        
        // Act
        GeneratedSourceResult? serviceRegistrationResult = runResult.Results
            .SelectMany(result => result.GeneratedSources)
            .SingleOrDefault(result => result.HintName.EndsWith("ServiceRegistration.g.cs"));
        
        GeneratedSourceResult? pooledServicesResult = runResult.Results
            .SelectMany(result => result.GeneratedSources)
            .SingleOrDefault(result => result.HintName.EndsWith("AutoPooledServices.g.cs"));

        // Assert
        await Assert.That(serviceRegistrationResult?.SourceText).IsNotNull();
        await Assert
            .That(serviceRegistrationResult?.SourceText.ToString())
            .IsEqualTo(expectedOutput).IgnoringWhitespace().WithTrimming();
        
        await Assert.That(pooledServicesResult?.SourceText).IsNotNull();
        await Assert
            .That(pooledServicesResult?.SourceText.ToString())
            .IsEqualTo(expectedOutputPooledServices).IgnoringWhitespace().WithTrimming();
        
    }

    #region FactoryCreatedService Test
    [LanguageInjection("csharp")] private const string FactoryCreatedServiceInput = """
        using Microsoft.Extensions.DependencyInjection;
        namespace TestNamespace {
            [AterraEngine.DependencyInjection.FactoryCreatedService<IExampleFactory, ICreatedService>(ServiceLifetime.Transient)]
            public class CreatedService : ICreatedService;
            public interface ICreatedService;
            
            [AterraEngine.DependencyInjection.InjectableService<IExampleFactory>(ServiceLifetime.Singleton)]
            public class ExampleFactory :IExampleFactory {
                public ICreatedService Create() => new CreatedService();
            }
            
            public interface IExampleFactory : AterraEngine.DependencyInjection.IFactoryService<ICreatedService>;
        }
        
        """;

    [LanguageInjection("csharp")] private const string FactoryCreatedServiceOutput = """
        // <auto-generated />
        using Microsoft.Extensions.DependencyInjection;
        namespace TestProject;

        public static class ServiceRegistration {
            public static IServiceCollection RegisterServicesFromTestProject(this IServiceCollection services) {
                services.AddSingleton<TestNamespace.IExampleFactory, TestNamespace.ExampleFactory>();
                services.AddTransient<TestNamespace.ICreatedService>(
                    (provider) => provider.GetRequiredService<TestNamespace.IExampleFactory>().Create()
                );
                return services;
            }
        }
        
        """;
    #endregion

    #region InjectableService Test
    [LanguageInjection("csharp")] private const string InjectableServiceInput = """
        using Microsoft.Extensions.DependencyInjection;
        namespace TestNamespace {
            [AterraEngine.DependencyInjection.InjectableService<IExampleService>(ServiceLifetime.Singleton)]
            public class ExampleService : IExampleService;
            
            
            public interface IExampleService;
        }
        
        """;

    [LanguageInjection("csharp")] private const string InjectableServiceOutput = """
        // <auto-generated />
        using Microsoft.Extensions.DependencyInjection;
        namespace TestProject;

        public static class ServiceRegistration {
            public static IServiceCollection RegisterServicesFromTestProject(this IServiceCollection services) {
                services.AddSingleton<TestNamespace.IExampleService, TestNamespace.ExampleService>();
                return services;
            }
        }

        """;
    #endregion

    #region PooledInjectableService Test
    [LanguageInjection("csharp")] private const string PooledInjectableServiceInput = """
        namespace TestProject;
        
        [AterraEngine.DependencyInjection.PooledInjectableService<IExamplePooled, ExamplePooled>]
        public class ExamplePooled : IExamplePooled {
            public bool Reset() => true;
        }
        
        public interface IExamplePooled : AterraEngine.DependencyInjection.IManualPoolable;
        """;

    [LanguageInjection("csharp")] private const string PooledInjectableServiceOutput = """
        // <auto-generated />
        using Microsoft.Extensions.DependencyInjection;
        namespace TestProject;
        
        public static class ServiceRegistration {
            public static IServiceCollection RegisterServicesFromTestProject(this IServiceCollection services) {
                services.AddSingleton<TestProject.AutoPooledServices>();
                services.AddTransient<TestProject.IExamplePooled>(
                    (provider) => provider.GetRequiredService<TestProject.AutoPooledServices>().ExamplePooledPool.Get()
                );
                return services;
            }
        }
        
        """;

    [LanguageInjection("csharp")] private const string PooledInjectableServiceOutputPooledServices = """
        // <auto-generated />
        using Microsoft.Extensions.ObjectPool;
        namespace TestProject;
        
        public partial class AutoPooledServices {
            private static readonly DefaultObjectPoolProvider _objectPoolProvider = new();
        
            public ObjectPool<TestProject.ExamplePooled> ExamplePooledPool { get; } = _objectPoolProvider
                .Create(new AterraEngine.DependencyInjection.PooledInjectableServiceObjectPolicy<TestProject.ExamplePooled>());
        }
        
        """;
    #endregion
}
