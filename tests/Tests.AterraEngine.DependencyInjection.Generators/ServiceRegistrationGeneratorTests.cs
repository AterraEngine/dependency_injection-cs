// ---------------------------------------------------------------------------------------------------------------------
// Imports
// ---------------------------------------------------------------------------------------------------------------------
using AterraEngine.DependencyInjection;
using AterraEngine.DependencyInjection.Generators;
using JetBrains.Annotations;
using System;
using System.Reflection;
using System.Threading.Tasks;
using Xunit;

namespace Tests.AterraEngine.DependencyInjection.Generators;
// ---------------------------------------------------------------------------------------------------------------------
// Code
// ---------------------------------------------------------------------------------------------------------------------
public class ServiceRegistrationGeneratorTests : IncrementalGeneratorTest<ServiceRegistrationGenerator> {
    protected override Assembly[] ReferenceAssemblies { get; } = [
        typeof(object).Assembly,
        typeof(FactoryCreatedServiceAttribute<,>).Assembly,
        typeof(IFactoryService<>).Assembly,
        typeof(InjectableServiceAttribute<>).Assembly,
        typeof(ValueTuple).Assembly, // For tuples
        typeof(Attribute).Assembly,
        typeof(Console).Assembly,
        Assembly.Load("System.Runtime")
    ];
    
    [Theory]
    [InlineData(FactoryCreatedServiceInput, FactoryCreatedServiceOutput)]
    public async Task TestText(string inputText, string expectedOutput) {
        await TestGeneratorAsync(inputText, expectedOutput, predicate: result => result.HintName.EndsWith("ServiceRegistration.g.cs"));
    }

    #region Original Test
    [LanguageInjection("csharp")] private const string FactoryCreatedServiceInput = """
        using Microsoft.Extensions.DependencyInjection;
        namespace TestNamespace {
            [FactoryCreatedService<IExampleFactory, ICreatedService>(ServiceLifetime.Transient)]
            public class CreatedService : ICreatedService;
            public interface ICreatedService;
            
            [InjectableService<IExampleFactory>(ServiceLifetime.Singleton)]
            public class ExampleFactory :IExampleFactory {
                public ICreatedService Create() => new CreatedService();
            }
            
            public interface IExampleFactory : IFactoryService<ICreatedService>;
        }
        """;

    [LanguageInjection("csharp")] private const string FactoryCreatedServiceOutput = """
        // <auto-generated />
        using Microsoft.Extensions.DependencyInjection;
        namespace TestNamespace;

        public static class ServiceRegistration {
            public static IServiceCollection RegisterServicesFromAterraEngineDependencyInjectionGeneratorsSample(this IServiceCollection services) {
                services.AddSingleton<AterraEngine.DependencyInjection.Generators.Sample.IExampleFactory, AterraEngine.DependencyInjection.Generators.Sample.ExampleFactory>();
                services.AddTransient<AterraEngine.DependencyInjection.Generators.Sample.IExampleFactory>((provider) => provider.GetRequiredService<AterraEngine.DependencyInjection.Generators.Sample.ICreatedService>().Create());
                return services;
            }
        }

        """;
    #endregion
}